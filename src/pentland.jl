"""
```
Z = retrieve_surface(algorithm::Pentland, img::AbstractArray)
```
Attempts to produce a heightmap from a grayscale image using Pentland's algorithm.

Under the assumptions of Lambertian surface, orthographic projections,
the surface being illuminated by distant light sources, the surface is
not self-shadowing andt he surface has constant albedo, hence it can be ignored.
The algarithm employs Tayler series expansion and Fourier transfroms to compute
a non-iterative solution.
# Output
Returns an M by N array (matching dimentions of original image) of Float `Z`
that represents the reconstructed height at the point.
# Details
The `slant` and `tilt` can be manually defined using the function signiture:
```
Z = retrieve_surface(algorithm::Pentland, img::AbstractArray, slant::Real, tilt::Real)
```
Note: if `slant` and `tilt` are nto defiend they will be calculated at runtime
usign `estimate_img_properties`.
# Arguments
The function arguments are described in more detail below.
##  `img`
An `AbstractArray` storing the grayscale value of each pixel within
the range [0,1].
## `slant`
A `Real` that specifies the slant value to be used by the algarithm. The `slant`
should be a value in the range [0,π/2]. If `slant` is specified to must the `tilt`.
## `tilt`
A `Real` that specifies the tilt value to be used by the algarithm. The `tilt`
should be a value in the range [0,2π]. If `tilt` is specified to must
the `slant`.
# Example
Compute the heightmap for a synthetic image generated by `generate_surface`.
```julia
using Images, Makie, ShapeFromShading

#generate synthetic image
img = generate_surface(0.5, [0.2,0,0.9], radius = 5)

#calculate the heightmap
Z = retrieve_surface(Pentland(), img)

#normalize to maximum of 1 (not necessary but makes displaying easier)
Z = Z./maximum(Z)

#display using Makie (Note: Makie can often take several minutes first time)
r = 0.0:0.1:2
surface(r, r, Z)
```
# Reference
1. A. Pentland, "Shape Information From Shading: A Theory About Human Perception," [1988 Proceedings] Second International Conference on Computer Vision, Tampa, FL, USA, 1988, pp. 404-413. [doi: 10.1109/CCV.1988.590017](https://doi.org/10.1109/ccv.1988.590017)
"""
function retrieve_surface(algorithm::Pentland, img::AbstractArray)
    ρ,I,σ,τ = estimate_img_properties(img)
    return retrieve_surface(Pentland(),img,σ,τ)
end

function retrieve_surface(algorithm::Pentland, img::AbstractArray, slant::Real, tilt::Real)
    #find illumination and albedo
    σ = slant
    τ = tilt
    E = Array{Float64}(img)
    #take fourier transform
    Fe = fft(E)
    M,N=size(E)

    #setup wx and wy
    wx,wy = setup_transform_values(M,N)

    #using the ilumination direction calculate the transformed Z
    Fz = Fe./(-1im.*wx.*cos(τ).*sin(σ)-1im.*wy.*sin(τ).*sin(σ))

    #recover Z
    Z = abs.(ifft(Fz))
    return Z
end
