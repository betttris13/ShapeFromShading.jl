var documenterSearchIndex = {"docs":
[{"location":"#ShapeFromShading.jl-1","page":"Home","title":"ShapeFromShading.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"The following documents the functionality currently available in ShapeFormShading.jl.","category":"page"},{"location":"#Synthetic-data-generation:-1","page":"Home","title":"Synthetic data generation:","text":"","category":"section"},{"location":"#Normal-Integration:-1","page":"Home","title":"Normal Integration:","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Frankot(::AbstractArray, ::AbstractArray)","category":"page"},{"location":"#ShapeFromShading.Frankot-Tuple{AbstractArray,AbstractArray}","page":"Home","title":"ShapeFromShading.Frankot","text":"Frankot()\n\nDefines the Frankot integrator which contians the Frankot-Chellappa method of integration. The Frankot-Chellappa method is a fast, reliable method for integration surface normals while enforcing integrability using Fourier methods.\n\nOutput\n\nFrankot() returns a Frankot integrator which can then be called to run the Frankot-Chellappa method on a gradient field.\n\nDetails\n\nFrankot-Chellappa method uses Fourier methods to attempt to solve the Poission equation nabla^2z = partial_up + partial_vq. By taking the Fourier transform of both sides we get:\n\n(omega^2_u + omega^2_v)hatz(omega_u omega_v) = imath omega_uhatp\n(omega_u omega_v) + imath omega_vhatq(omega_u omega_v)\n\nBy rearranging the above equation we arrive at an equation for hatz;\n\nhatz(omega_u omega_v) = fracomega_uhatp(omega_u omega_v) +\nomega_vhatq(omega_u omega_v)imath(omega^2_u + omega^2_v)\n\nFrom which the final surface can be found by taking the inverse Fourier transform of hatz.\n\nDue to the way (omega_u omega_v) is defined the algorithm works best when the input dimensions are odd in length. To accommodate this the integrator will pad the edge of the inputs if they are even before running the algorithm. This padding will be removed before returning a value hence output size will be unaffected.\n\nParameters\n\nFrankot integrator take no parameters.\n\nExample\n\nThe following example demonstrates  the use of the Frankot integrator.\n\nusing ShapeFromShading, Makie\n\n# Generate synthetic gradients\np, q = synthetic_gradient(SynthSphere(), radius = 38, img_size = 151)\n\n# Create a Frankot() integrator\nfrankot = Frankot()\n\n# Calculate the heightmap from the gradients\nZ = frankot(p, q)\n\n# Normalize to maximum of 1 (not necessary but makes displaying easier)\nZ = Z./maximum(Z)\n\n# Display using Makie (Note: Makie can often take several minutes first time)\nr = 0.0:0.1:4\nsurface(r, r, Z)\n\nReference\n\n[1] R. T. Frankot and R. Chellappa, \"A method for enforcing integrability in shape from shading algorithms,\" in IEEE Transactions on Pattern Analysis and Machine Intelligence, vol. 10, no. 4, pp. 439-451, July 1988. doi: 10.1109/34.3909\n\n\n\n\n\n","category":"method"},{"location":"#","page":"Home","title":"Home","text":"Path(::AbstractArray, ::AbstractArray)","category":"page"},{"location":"#ShapeFromShading.Path-Tuple{AbstractArray,AbstractArray}","page":"Home","title":"ShapeFromShading.Path","text":"Path()\n\nCreates a Path() integrator which utilises the average of two path integrals along varying paths. Each path integral reconstructs the surface with accumulating error along the path, hence averaging two different paths can minimise this error, although the method still suffers if the gradient field is not integrable at some points.\n\nOutput\n\nPath() returns a Path integrator which can then be called to integrate a gradient field.\n\nDetails\n\nUnder the assumption that the surface normals are approximately integrable everywhere (fracpartial ppartial yapproxfracpartial qpartial x), then surface can be reconstructed using the path integral defined as:\n\nz(xy)=oint_cleft(fracpartial zpartial xfracpartial zpartial yright)cdot dl\n\nWhich can be broken into two integrals representing the value at each point on the surface as shown below for a path which integrates along the first column then along the row.\n\nz(uv)=int_0^vfracpartial zpartial y(0y)dy + int_0^ufracpartial zpartial x(xv)dx\n\nThe second path used in the algorithm is simply the transpose of the first, integrating along the first row then down the column represented mathematically as:\n\nz(uv)=int_0^ufracpartial zpartial x(x0)dx + int_0^vfracpartial zpartial y(uy)dy\n\nThe algorithm can be written, then discretised as shown below:\n\nbegingathered\nz(uv)=frac12left(int_0^vfracpartial zpartial y(0y)dy + int_0^ufracpartial zpartial x(xv)dx + int_0^ufracpartial zpartial x(x0)dx + int_0^vfracpartial zpartial y(uy)dyright)\nz(uv)=frac12left(sum_i=0^vq(0i) + sum_j=0^up(jv) + sum_j=0^up(j0) + sum_i=0^vq(ui)right)\nz(uv)=frac12left(sum_i=0^v(q(0i) + q(ui)) + sum_j=0^u(p(j0) + p(jv))right)\nendgathered\n\nIt is important to note as mentioned above if there are non-integrable points in the normal field then artefacts can appear in the reconstruction. This is seen in the example below where the otherwise smooth sphere appears \"spiky\". This can be corrected post reconstruction by smoothing but ideally a different integrator should be used.\n\nParameters\n\nPath integrator take no parameters.\n\nExample\n\nThe following example demonstrates the use of the Path integrator.\n\nusing ShapeFromShading, Makie\n\n# Generate synthetic gradients\np, q = synthetic_gradient(SynthSphere(), radius = 38, img_size = 151)\n\n# Create a Path() integrator\npath = Path()\n\n# Calculate the heightmap from the gradients\nZ = path(p, q)\n\n# Normalize to maximum of 1 (not necessary but makes displaying easier)\nZ = Z./maximum(Z)\n\n# Display using Makie (Note: Makie can often take several minutes first time)\nr = 0.0:0.1:4\nsurface(r, r, Z)\n\nReference\n\n[1] D. Forsyth and J. Ponce, Computer vision: a modern approach. Upper Saddle River, N.J: Prentice Hall, 2003, pp. 84-86.\n\n\n\n\n\n","category":"method"},{"location":"#","page":"Home","title":"Home","text":"SplitPath(::AbstractArray, ::AbstractArray)","category":"page"},{"location":"#ShapeFromShading.SplitPath-Tuple{AbstractArray,AbstractArray}","page":"Home","title":"ShapeFromShading.SplitPath","text":"SplitPath()\n\nCreates a SplitPath() integrator which utilizes the average of two path integrals along varying paths averaging the value at each step. Each path integral reconstructs the surface with accumlating error along the path, hence averaging two different paths at each step reduces the global error at the cost of local error, although the method still suffers if the gradient field is not integrable at some points it does less so the Path() from which it extends.\n\nOutput\n\nSplitPath() returns a SplitPath integrator which can then be called to integrate a gradient field.\n\nDetails\n\nUnder the assumption that the surface normals are approximately integrable everywhere (fracpartial ppartial yapproxfracpartial qpartial x), then surface can be reconstructed using the path integral defined as:\n\nz(xy)=oint_cleft(fracpartial zpartial xfracpartial zpartial yright)cdot dl\n\nBy expanding on this principle and the discreate summation from Path() we can arrive at the discreate expresion for the value at each point, assuming all values prior to that point have been calculated, as follows:\n\nz_uv = frac12(z_u-1v+p_u-1v+z_uv-1+q_uv-1)\n\nAs with other similar methods (see Horn()) care must be taken with regards to boundaries which can be calculated, to a constant value z(00) which is assumed to be the zero point, using:\n\nbegingathered\nz_u0 = z_u-10+p_u-10\nz_0v = z_0v-1+q_0v-1\nendgathered\n\nIt is important to note as mentioned above if there are non-integrable points in the normal field then artefacts can appear in the reconstruction. These errors gradually average out but will lead to \"streaks\" appearing in the reconstruction. This is seen in the example below where the otherwise smooth sphere appears has ripple like structures pointing toward to top right corner. This can be corrected post reconstruction by smoothing but ideally a different integrator should be used. It is also interesting to note the parallels between this method and the Horn and Brooks method, with this method being effectively the forward component of Horn's method. As such this algorithm provided a useful middle ground between direct integration algorithms and iterative algorithms such as the Horn and Brooks method.\n\nParameters\n\nSplitPath integrator take no parameters.\n\nExample\n\nThe following example demonstrates the use of the SplitPath integrator.\n\nusing ShapeFromShading, Makie\n\n# Generate synthetic gradients\np, q = synthetic_gradient(SynthSphere(), radius = 38, img_size = 151)\n\n# Create a Path() integrator\nsplitPath = SplitPath()\n\n# Calculate the heightmap from the gradients\nZ = splitPath(p, q)\n\n# Normalize to maximum of 1 (not necessary but makes displaying easier)\nZ = Z./maximum(Z)\n\n# Display using Makie (Note: Makie can often take several minutes first time)\nr = 0.0:0.1:4\nsurface(r, r, Z)\n\nReference\n\n[1] D. Forsyth and J. Ponce, Computer vision: a modern approach. Upper Saddle River, N.J: Prentice Hall, 2003, pp. 84-86. [2] B. Horn and M. Brooks, \"The variational approach to shape from shading\", Computer Vision, Graphics, and Image Processing, vol. 33, no. 2, pp. 174-208, 1986. doi: 10.1016/0734-189x(86)90114-3\n\n\n\n\n\n","category":"method"},{"location":"#","page":"Home","title":"Home","text":"Horn(::AbstractArray, ::AbstractArray)","category":"page"},{"location":"#ShapeFromShading.Horn-Tuple{AbstractArray,AbstractArray}","page":"Home","title":"ShapeFromShading.Horn","text":"Horn()\n\nImplements the Horn and Brook's method of integrating surface normals. This algorithm offers an iterative solution to the Poisson equation describing the surface providing good reconstructions under most conditions.\n\nOutput\n\nHorn() returns a Horn integrator which can then be called to integrate a gradient field.\n\nDetails\n\nThe Horn and Brook's method attempts to solve the Poisson equation nabla^2z = partial_up + partial_vq by the discretization given below:\n\nz_u+1v+z_uv+1+z_u-1v+z_uv-1-4z_uv=fracp_u+1v-p_u-1v2+fracq_uv+1-q_uv-12\n\nWhich can be rearranged to give the iterative scheme provided by:\n\nz_uv^k+1= fracz_u+1v^k + z_uv+1^k + z_u-1v^k + z_uv-1^k4 - fracp_u+1v-p_u-1v8 - fracq_uv+1-q_uv-18\n\nThis scheme will always converge to a solution however the rate of convergence may depend upon the initial solution. This implementation will initilize with a zero solution. Neumann boundary conditions are imposed at the edges where the scheme would otherwise go out of bounds.\n\nParameters\n\nThe function parameters are described in more detail below.\n\nMax_iter:\n\nAn Int which controls the number of iterations the algorithm will run for.\n\nϵ:\n\nA Real representing the distance between pixels. This will Control how tall the final reconstruction is relative the array grid.\n\nExample\n\nThe following example demonstrates the use of the Horn integrator.\n\nusing ShapeFromShading, Makie\n\n# Generate synthetic gradients\np, q = synthetic_gradient(SynthSphere(), radius = 38, img_size = 151)\n\n# Create a Horn() integrator\nhorn = Horn(ϵ = 0.03, max_iter = 10000)\n\n# Calculate the heightmap from the gradients\nZ = horn(p, q)\n\n# Display using Makie (Note: Makie can often take several minutes first time)\nr = 0.0:0.1:4\nsurface(r, r, Z)\n\nReference\n\n[1] B. Horn and M. Brooks, \"The variational approach to shape from shading\", Computer Vision, Graphics, and Image Processing, vol. 33, no. 2, pp. 174-208, 1986. doi: 10.1016/0734-189x(86)90114-3\n\n\n\n\n\n","category":"method"},{"location":"#","page":"Home","title":"Home","text":"Durou(::AbstractArray, ::AbstractArray)","category":"page"},{"location":"#ShapeFromShading.Durou-Tuple{AbstractArray,AbstractArray}","page":"Home","title":"ShapeFromShading.Durou","text":"Durou()\n\nImplements the Durou and Courteille method of integrating surface normals. This algorithm offers an iterative solution to the Poisson equation describing the surface extending Horn and Brook's method by improving the boundary approximation and providing good reconstructions under most conditions.\n\nOutput\n\nDurou() returns a Durou integrator which can then be called to integrate a gradient field.\n\nDetails\n\nTheDurou and Courteille's method attempts to solve the Poisson equation nabla^2z = partial_up + partial_vq by the discretization given below:\n\nz_u+1v+z_uv+1-2z_uv=fracp_u+1v+p_uv2+fracq_uv+1+q_uv2\n\nWhich can be rearranged to give the iterative scheme provided by:\n\nz_uv^k+1= fracz_u+1v^k + z_uv+1^k2 - fracp_u+1v+p_uv4 - fracq_uv+1+q_uv4\n\nThis scheme will always converge to a solution however the rate of convergence may depend upon the initial solution. This implementation will initialize with a zero solution. Natural boundary conditions are imposed at the edges using the condition partial_uz-p+partial_v-q=0. Although faster then the Horn and Brook's method and better at handling boundaries, it can generate a worse solution under some conditions.\n\nParameters\n\nThe function parameters are described in more detail below.\n\nMax_iter:\n\nAn Int which controls the number of iterations the algorithm will run for. the range [0,1].\n\nϵ:\n\nA Real representing the distance between pixels. This will Control how tall the final reconstruction is relative the array grid.\n\nExample\n\nThe following example demonstrates the use of the Durou integrator.\n\nusing ShapeFromShading, Makie\n\n# Generate synthetic gradients\np, q = synthetic_gradient(SynthSphere(), radius = 38, img_size = 151)\n\n# Create a Durou() integrator\ndurou = Durou(ϵ = 0.03, max_iter = 10000)\n\n# Calculate the heightmap from the gradients\nZ = durou(p, q)\n\n# Display using Makie (Note: Makie can often take several minutes first time)\nr = 0.0:0.1:4\nsurface(r, r, Z)\n\nReference\n\n[1] Y. Quéau, J. Durou and J. Aujol, \"Normal Integration: A Survey\", Journal of Mathematical Imaging and Vision, vol. 60, no. 4, pp. 576-593, 2017. doi: 10.1007/s10851-017-0773-x\n\n\n\n\n\n","category":"method"},{"location":"#","page":"Home","title":"Home","text":"Quadratic(::AbstractArray, ::AbstractArray)","category":"page"},{"location":"#ShapeFromShading.Quadratic-Tuple{AbstractArray,AbstractArray}","page":"Home","title":"ShapeFromShading.Quadratic","text":"Quadratic()\n\nImplements the quadratic variational least squared method proposed by Aujol, Durou and Quéau. The algorithm solves the least squares system generated from minimizing a fidelity term mathcalF(z) = iint_(uv)in OmegaPhi(nabla z(uv) - g(uv))dudv and a regularization term mathcalR(z) = iint_(uv)in Omegalambda leftz(uv)-z^0(uv)right^2dudv where Phi(s) = s^2. This method is able to quickly produce good solutions on a smooth surface and can easily handle non-rectangular domains or sub-divided domains and can provide a good starting solution for other algorithms.\n\nOutput\n\nQuadratic() returns a Quadratic integrator which can then be called to run the quadratic method on a gradient field.\n\nDetails\n\nAs mentioned above the quadratic variational least squared method aims to minimize a fidelity term mathcalF(z) = iint_(uv)in OmegaPhi(nabla z(uv) - g(uv))dudv and a regulization term mathcalR(z) = iint_(uv)in Omegalambda leftz(uv)-z^0(uv)right^2dudv where Phi(s) = s^2.\n\nThis leads to the minimization problem given by:\n\nminiint_(uv)in Omeganabla z(uv)-mathbfg(uv)^2+lambda(uv)leftz(uv)-z^0(uv)right^2dudv\n\nBy discretizing the problem we can arrive at the functional:\n\nbeginaligned\nE(z) = frac12Big(sum_(uv)in Omega_u^+partial_u^+z_uv-p_uv^2 + sum_(uv)in Omega_u^-partial_u^-z_uv-p_uv^2 + sum_(uv)in Omega_v^+partial_v^+z_uv-q_uv^2 + sum_(uv)in Omega_v^-partial_v^-z_uv-q_uv^2Big) + sum_(uv)in Omegaz_uv-z^0_uv^2\nendaligned\n\nwhere Omega_u^+ represents the domain where (uv)in(uv)inOmega(uv)(u+1v)inOmega etc.. Using this definition the discrete differences can be converted into matrix form, where p_uv=z_u+1v-z_uv is the forward difference in the u direction etc. This data is then stacked into three vectors; mathbfzmathbfpmathbfqinR^Omega. Thus the matrix reresenting each of these is defined as below where m(i) is the mapping of the ith element of this vector to its corresponding point in (uv) and D_u^+ is a OmegatimesOmega matrix.\n\nD_u^+ij=begincases\n   0 textif  m(i)notinOmega_u^+ textor  j ne i textor  j ne i+1\n   -1 textif  j = i text and  m(i)inOmega_u^+\n   1 textif  j = i+1 text and  m(i)inOmega_u^+\nendcases\n\nFor a 2X2 domain this looks like:\n\nD_u^+ = beginbmatrix\n   -1  1  0  0 \n   0  0  0  0 \n   0  0  -1  1 \n   0  0  0  0\nendbmatrix\n\nThe other three discrete differences matrices are similarly defined from there definitions to be D_u^-, D_v^+ and D_v^-. These can then be used to redefine the minimization problem to be in the form:\n\nE(mathbfz)=frac12left(D_u^+mathbfz-mathbfp^2+D_u^-mathbfz-mathbfp^2+D_v^+mathbfz-mathbfq^2+D_v^-mathbfz-mathbfq^2right)+Lambda(mathbfz-mathbfz^0)^2\n\nWhere Lambda is the OmegatimesOmega diagonal matrix containing the values of sqrtlambda_uv. Using the above definitions the negative Laplacian matrix can then be defined as:\n\nL=frac12D_u^+topD_u^++D_u^-topD_u^-+D_v^+topD_v^++D_v^-topD_v^-\n\nFinally the least minimization problem can be represented in the form of a least squares problem of the form Amathbfz=mathbfb where:\n\nbegingathered\nA=L+Lambda^2\nmathbfb=frac12leftD_u^+top+D_u^-toprightmathbfp+frac12leftD_v^+top+D_v^-toprightmathbfq+Lambda^2mathbfz^0\n=D_umathbfp+D_vmathbfq+Lambda^2mathbfz^0\nendgathered\n\nThis system is then solved using a standard conjugate gradient algorithm where the initialization has only a slight impact on the runtime and no impact on the final solution. The algorithm provides good results on smooth surfaces but struggles in the presence of discontinuities.\n\nParameters\n\nz:\n\nAn AbstractArray which defines the value of z^0 the initial solution and prior to be used in the regularization term. Must be provided.\n\nλ:\n\nAn AbstractArray the same size as z, defaulting to 100^-6 everywhere. This defines theregulization weight at each point. Large values will force the algorithm to keep the solution near to z^0 at that position. Can be used to keep the solution near the initial solution or guide the solution to a certain known value at points (i.e. known maxima and minima). This value should be set uniformly small otherwise.\n\nmask:\n\nAn AbstractArray the same size as z, which guides the algorithm as to where the valid domain is. Values of 1 will be in the domain Omega while other values will be ignored and set to z^0. This can be used to integrate over sub-domain or to segment the domain into parts. The gen_mask() funtion can be used to generate a mask which will remove non-integrable regions dramatically improving the solution under most condition at the cost of not integrating the entire solution.\n\nExample\n\nThe following example demonstrates the use of the Quadratic integrator.\n\nusing ShapeFromShading, Makie\n\n# Generate synthetic gradients\np, q = synthetic_gradient(Prism(), radius = 75, img_size = 151)\n\n# Create a Quadratic() integrator\nquadratic = Quadratic(z=zeros(size(p)))\nquadraticMasked = Quadratic(z=zeros(size(p)), mask=gen_mask(p,q,1.0)[:,:,1])\n\n# Calculate the heightmap from the gradients\nZ = quadratic(p, q)\nZ2 = quadraticMasked(p, q)\n\n# Normalize to maximum of 1 (not necessary but makes displaying easier)\nZ = Z./maximum(Z)\nZ2 = Z2./maximum(Z2)\n\n# Display using Makie (Note: Makie can often take several minutes first time)\nr = 0.0:0.1:4\nvbox(surface(r, r, Z), surface(r, r, Z2))\n\nReference\n\n[1] Y. Quéau, J. Durou and J. Aujol, \"Variational Methods for Normal Integration\", Journal of Mathematical Imaging and Vision, vol. 60, no. 4, pp. 609-632, 2017. doi: 10.1007/s10851-017-0777-6\n\n\n\n\n\n","category":"method"},{"location":"#","page":"Home","title":"Home","text":"TotalVariation(::AbstractArray, ::AbstractArray)","category":"page"},{"location":"#ShapeFromShading.TotalVariation-Tuple{AbstractArray,AbstractArray}","page":"Home","title":"ShapeFromShading.TotalVariation","text":"TotalVariation()\n\nImplements the total variational method proposed by Aujol, Durou and Quéau. The algorithm solves the same minimization problem as th Quadraticmethod exept the fidelity terms function Phi(s)=s_L_1. This method is able to produce good solutions on a smooth and piecewise smooth surface and can easily handle non-rectangular domains or sub-divided domains.\n\nOutput\n\nTotalVariation() returns a TotalVariation integrator which can then be called to run the quadratic method on a gradient field.\n\nDetails\n\nAs discussed above this algorithm used the same fidelity and regularization terms as the Quadratic method exept the Phi(s)=s^2 term is replaced with Phi(s)=s_L_1. This leads to the minimization problem defined by:\n\nminiint_(uv)in Omeganabla z(uv)-mathbfg(uv)+lambda(uv)leftz(uv)-z^0(uv)right^2dudv\n\nBy considering the four posible discreatisations of z(uv) we can generate four posible domains to consider given by; Omega^UV=Omega_u^UcupOmega_v^V (UV)in+-^2 where +-^2 refers to all posible combinations of +,-. Using these the following discreate functional can be generated:\n\nbeginaligned\nE(mathbfz)=frac14Big(sum_(uv)inOmega^++sqrtpartial_u^+z_uv-p_uv^2+partial_v^+z_uv-q_uv^2\n+sum_(uv)inOmega^+-sqrtpartial_u^+z_uv-p_uv^2+partial_v^-z_uv-q_uv^2\n+sum_(uv)inOmega^-+sqrtpartial_u^-z_uv-p_uv^2+partial_v^+z_uv-q_uv^2\n+sum_(uv)inOmega^--sqrtpartial_u^-z_uv-p_uv^2+partial_v^-z_uv-q_uv^2Big)\n+sum_(uv)inOmegalambda_uvleftz_uv-z^0_uvright^2\nendaligned\n\nWhich simplifies to the minimization problem:\n\nbegingathered\nminfrac14sum_(UV)in+-^2sum_(uv)inOmega^UVmathbfr_(uv)^UV+sum_(uv)inOmegalambda_uvleftz_uv-z^0_uvright^2\nmathbfr_(uv)^UV=nabla^UVz_uv-mathbfg_uv\nendgathered\n\nThis leads to the optimization scheme using an ADMM algorithm defined by:\n\nbeginaligned\nz^(k+1)=minfracalpha8sum_(UV)in+-^2sum_(uv)inOmega^UVnabla^UVz_uv-(mathbfg_uv+mathbfr_(uv)^UV^(k)-mathbfb_(uv)^UV^(k))+sum_(uv)inOmegalambda_uvleftz_uv-z^0_uvright^2\nmathbfr_(uv)^UV^(k+1)=minfracalpha8mathbfr-(nabla^UVz_uv-mathbfg_uv+mathbfb_(uv)^UV^(k))+mathbfr\nmathbfb_(uv)^UV^(k+1)=mathbfb_(uv)^UV^(k))+nabla^UVz_uv-mathbfg_uv-mathbfr_(uv)^UV^(k+1)\nendaligned\n\nThe z update then can be solved using the linear system defined below, where D_{u,v}^{U,V} and Lambda are the same at those defined in Quadratic.\n\nbeginaligned\n    A_TVmathbfz^(k+1)=b_TV^(k)\n    A_TV=fracalpha8sum_(UV)in+-^2leftD_u^UtopD_u^U+D_v^VtopD_v^Vright + Lambda^2\n    b_TV^(k)=fracalpha8sum_(UV)in+-^2leftD_u^UtopmathbfP^UV^(k) + D_v^VtopmathbfQ^UV^(k)right+ Lambda^2mathbfz^0\nendaligned\n\nWhere mathbfP^UV^(k) mathbfQ^UV^(k) are the u and v components of mathbfg+mathbfr^UV^(k)-mathbfb^UV^(k). This can be solved using conjugate gradient. Finally the update to mathbfr^UV can be computed as:\n\nbeginaligned\n    mathbfr^UV^(k+1)=maxBigmathbfs_uv^UV^(k+1)-frac4alpha0Bigfracmathbfs_uv^UV^(k+1)mathbfs_uv^UV^(k+1)\n    textWhere\n    mathbfs^UV^(k+1)=nabla^UVz_uv^(k+1)-mathbfg_uv+mathbfb_uv^UV^(k)\nendaligned\n\nParameters\n\nz:\n\nAn AbstractArray which defines the value of z^0 the initial solution and prior to be used in the regulization term. Must be provided.\n\nα:\n\nA Real with defult value of 1.0 which controls the step size. In theory this value should have no impact on final solution but in practice larger values can lead to worse solutions while values which are two small may lead non-convergance in the least square update step, causing the algorithm to hang for long periods of time. Values below 0.25 are not recomended but may work depending on domain size and inputs.\n\nλ:\n\nAn AbstractArray the same size as z defulting to 100^-6 everywhere. This defines theregulization weight at each point. Large valueas will force the algorithm to keep the solution near to z^0 at that position. Can be used to keep the solution near the initial solution or guide the solution to a certian known value at points (i.e. known maxima and minima). This value should be set uniformly small otherwise.\n\nmask:\n\nAn AbstractArray the same size as z, which guides the algorithm as to where the valid domain is. Values of 1 will be in the domain Omega while other values will be ignored and set to z^0. This can be used to integrate over sub-domain or to segment the domain into parts. The gen_mask() funtion can be used to generate a mask which will remove non-integrable regions dramatically improving the solution under most condition at the cost of not integrating the entire solution.\n\nExample\n\nThe following example demonstrates the use of the TotalVariation integrator.\n\nusing ShapeFromShading, Makie\n\n# Generate synthetic gradients\np, q = synthetic_gradient(Prism(), radius = 75, img_size = 151)\n\n# Create a TotalVariation() integrator\ntotalVariation = TotalVariation(z=zeros(size(p)), α=1.0)\ntotalVariationMasked = TotalVariation(z=zeros(size(p)), α=0.5, mask=gen_mask(p,q,1.0)[:,:,1])\n\n# Calculate the heightmap from the gradients\nZ = totalVariation(p, q)\nZ2 = totalVariationMasked(p, q)\n\n# Normalize to maximum of 1 (not necessary but makes displaying easier)\nZ = Z./maximum(Z)\nZ2 = Z2./maximum(Z2)\n\n# Display using Makie (Note: Makie can often take several minutes first time)\nr = 0.0:0.1:4\nvbox(surface(r, r, Z), surface(r, r, Z2))\n\nReference\n\n[1] Y. Quéau, J. Durou and J. Aujol, \"Variational Methods for Normal Integration\", Journal of Mathematical Imaging and Vision, vol. 60, no. 4, pp. 609-632, 2017. doi: 10.1007/s10851-017-0777-6\n\n\n\n\n\n","category":"method"},{"location":"#","page":"Home","title":"Home","text":"NonConvex1(::AbstractArray, ::AbstractArray)","category":"page"},{"location":"#ShapeFromShading.NonConvex1-Tuple{AbstractArray,AbstractArray}","page":"Home","title":"ShapeFromShading.NonConvex1","text":"NonConvex1()\n\nThe first of two non-convex regularization methods proposed by Aujol, Durou and Quéau. The same fidelity and regularization terms to minimize as Quadratic are used, but the convexity of Phi is sacrificed in order to gain better behaviour around discontinuities and outliers.\n\nOutput\n\nNonConvex1() returns a NonConvex1 integrator which can then be called to run the non-convex regularization method method on a gradient field.\n\nDetails\n\nThe initial minimization problem is the same as in TotalVariation as given below exept Phi is defined using the given function instead of the L_1 norm.\n\nbeginaligned\nminiint_(uv)in Omeganabla z(uv)-mathbfg(uv)+lambda(uv)leftz(uv)-z^0(uv)right^2dudv\ntextwhere\nPhi(s)=log(s^2+beta^2)\nendaligned\n\nThe problem can then be discretized to form the following functional where D_uv^UV is a 2timesOmega matrix formed from stacking the vectors of the finite diferences.\n\nbeginaligned\nE(mathbfz)=frac14sum_(UV)in+-^2sum_(uv)inOmega^UVPhi(nabla z_uv-mathbfg_uv)+sum_(uv)inOmegalambda_uvleftz_uv-z^0_uvright^2\n=frac14sum_(UV)in+-^2sum_(uv)inOmega^UVPhi(D_uv^UVmathbfz-mathbfg_uv)+Lambdaleft(mathbfz-mathbfz^0right)^2\n=f(mathbfz)+g(mathbfz)\nendaligned\n\nAs f(mathbfz) is smooth but not convex and g(mathbfz) is convex the iPiano algorithm is then used to iterativly solve the minimization of the functional such that:\n\nmathbfz^(k+1)=(I+alpha_1partial g)^-1(mathbfz^(k)-alpha_1nabla f(mathbfz^(k))+alpha_2(mathbfz^(k)-z^(k+1)))\n\nwhere (I+alpha_1partial g)^-1 is a proximal operator defined as:\n\n(I+alpha_1partial g)^-1(mathbfhatx)=(I+2alpha_1Lambda^2)^-1(mathbfhatx+2alpha_1Lambdamathbfz^0)\n\nUsing the definition of Phi given above, the derivative of f(mathbfz) can be computed as below:\n\nnabla f(mathbfz)=frac14sum_(UV)in+-^2sum_(uv)inOmega^UVfracD_uv^UV^top(D_uv^UVmathbfz-mathbfg_uv)D_uv^UVmathbfz-mathbfg_uv^2+beta^2\n\nThe values of alpha_1 and aplha_2 control the step size of the algorith and are chosen such that alpha_2 is fixed at 0.8 while alpha_1 is chosen using the lazy backtracking method, which uses a Lipschitz constant to caculate a suitably small step size at each step using the below relationship where eta1 is a constant:\n\nbeginaligned\nalpha_1  2(1-alpha_2)L_n\ntextwhere\nL_kinL_k-1eta L_k-1eta^2L_k-1\ntextsuch that it is minimal and satisfies\nf(x^(k+1))le f(x^(k)) + leftlanglenabla f(x^(k)) x^(k+1)-x^(k)rightrangle+fracL_k2x^(k+1)-x^(k)^2\nendaligned\n\nThis method, being non-convex, highly relies on a good initial solution and will often only provide a minimal improvment to the solution. A bad initial solution will produce a final solution which does not resemble the surface under most conditions.\n\nParameters\n\nz:\n\nAn AbstractArray which defines the value of z^0 the initial solution and prior to be used in the regulization term.\n\nβ:\n\nA Real which acts as a hyper-parameter to the function. Large values for β will produce smoother functions but loose discontinuities. Smaller value will preserve discontinuities but lead to staircassing in the solution. Defults to 0.5.\n\nλ:\n\nAn AbstractArray the same size as z defulting to 100^-6 everywhere. This defines theregulization weight at each point. Large valueas will force the algorithm to keep the solution near to z^0 at that position. Can be used to keep the solution near the initial solution or guide the solution to a certian known value at points (i.e. known maxima and minima). This value should be set uniformly small otherwise.\n\nmask:\n\nAn AbstractArray the same size as z, which guides the algorithm as to where the valid domain is. Values of 1 will be in the domain Omega while other values will be ignored and set to z^0. This can be used to integrate over sub-domain or to segment the domain into parts. The gen_mask() funtion can be used to generate a mask which will remove non-integrable regions dramatically improving the solution under most condition at the cost of not integrating the entire solution.\n\nExample\n\nThe following example demonstrates the use of the NonConvex1 integrator.\n\nusing ShapeFromShading, Makie\n\n# Generate synthetic gradients\np, q = synthetic_gradient(Prism(), radius = 75, img_size = 151)\n\n# Create a NonConvex1() integrator\nnonConvex1 = NonConvex1(z=zeros(size(p)), β=0.5)\nnonConvex1Init = NonConvex1(z=Horn()(p,q), β=0.5)\n\n# Calculate the heightmap from the gradients\nZ = nonConvex1(p, q)\nZ2 = nonConvex1Init(p, q)\n\n# Normalize to maximum of 1 (not necessary but makes displaying easier)\nZ = Z./maximum(Z)\nZ2 = Z2./maximum(Z2)\n\n# Display using Makie (Note: Makie can often take several minutes first time)\nr = 0.0:0.1:4\nvbox(surface(r, r, Z), surface(r, r, Z2))\n\nReference\n\n[1] Y. Quéau, J. Durou and J. Aujol, \"Variational Methods for Normal Integration\", Journal of Mathematical Imaging and Vision, vol. 60, no. 4, pp. 609-632, 2017. doi: 10.1007/s10851-017-0777-6\n\n\n\n\n\n","category":"method"},{"location":"#","page":"Home","title":"Home","text":"NonConvex2(::AbstractArray, ::AbstractArray)","category":"page"},{"location":"#ShapeFromShading.NonConvex2-Tuple{AbstractArray,AbstractArray}","page":"Home","title":"ShapeFromShading.NonConvex2","text":"NonConvex2()\n\nThe second of two non-convex regularization methods proposed by Aujol, Durou and Quéau. The same as NonConvex1 exept Phi has been replaced with a different non-convex function.\n\nOutput\n\nNonConvex2() returns a NonConvex2 integrator which can then be called to run the non-convex regularization method method on a gradient field.\n\nDetails\n\nThe implimentation is the same as the one in TotalVariation as given below exept Phi is defined as below:\n\nPhi(s)=fracs^2s^2+gamma^2\n\nUsing the definition of Phi given above, the derivative of f(mathbfz) can be computed as below:\n\nnabla f(mathbfz)=frac14sum_(UV)in+-^2sum_(uv)inOmega^UVfracgamma^2D_uv^UV^top(D_uv^UVmathbfz-mathbfg_uv)()D_uv^UVmathbfz-mathbfg_uv^2+gamma^2)^2\n\nThis method, being non-convex, highly relies on a good initial solution and will often only provide a minimal improvment to the solution. A bad initial solution will produce a final solution which does not resemble the surface under most conditions.\n\nParameters\n\nz:\n\nAn AbstractArray which defines the value of z^0 the initial solution and prior to be used in the regulization term.\n\nγ:\n\nA Real which acts as a hyper-parameter to the function. Large values for γ will produce smoother functions but loose discontinuities. Smaller value will preserve discontinuities but lead to staircassing in the solution. Defults to 1.0.\n\nλ:\n\nAn AbstractArray the same size as z defulting to 100^-6 everywhere. This defines theregulization weight at each point. Large valueas will force the algorithm to keep the solution near to z^0 at that position. Can be used to keep the solution near the initial solution or guide the solution to a certian known value at points (i.e. known maxima and minima). This value should be set uniformly small otherwise.\n\nmask:\n\nAn AbstractArray the same size as z, which guides the algorithm as to where the valid domain is. Values of 1 will be in the domain Omega while other values will be ignored and set to z^0. This can be used to integrate over sub-domain or to segment the domain into parts. The gen_mask() funtion can be used to generate a mask which will remove non-integrable regions dramatically improving the solution under most condition at the cost of not integrating the entire solution.\n\nExample\n\nThe following example demonstrates the use of the NonConvex2 integrator.\n\nusing ShapeFromShading, Makie\n\n# Generate synthetic gradients\np, q = synthetic_gradient(Prism(), radius = 75, img_size = 151)\n\n# Create a NonConvex2() integrator\nnonConvex2 = NonConvex2(z=zeros(size(p)), γ=1.0)\nnonConvex2Init = NonConvex2(z=Horn()(p,q), γ=1.0)\n\n# Calculate the heightmap from the gradients\nZ = nonConvex2(p, q)\nZ2 = nonConvex2Init(p, q)\n\n# Normalize to maximum of 1 (not necessary but makes displaying easier)\nZ = Z./maximum(Z)\nZ2 = Z2./maximum(Z2)\n\n# Display using Makie (Note: Makie can often take several minutes first time)\nr = 0.0:0.1:4\nvbox(surface(r, r, Z), surface(r, r, Z2))\n\nReference\n\n[1] Y. Quéau, J. Durou and J. Aujol, \"Variational Methods for Normal Integration\", Journal of Mathematical Imaging and Vision, vol. 60, no. 4, pp. 609-632, 2017. doi: 10.1007/s10851-017-0777-6\n\n\n\n\n\n","category":"method"},{"location":"#","page":"Home","title":"Home","text":"AnisotropicDiffusion(::AbstractArray, ::AbstractArray)","category":"page"},{"location":"#ShapeFromShading.AnisotropicDiffusion-Tuple{AbstractArray,AbstractArray}","page":"Home","title":"ShapeFromShading.AnisotropicDiffusion","text":"AnisotropicDiffusion()\n\nDefines the anisotropic diffusion method as proposed by Aujol, Durou and Quéau. It utilizes an anisotropic diffusion like process to create a weighted version of the least squares problem solved in the Quadratic method.\n\nOutput\n\nAnisotropicDiffusion() returns a AnisotropicDiffusion integrator which can then be called to run the anisotropic diffusion method method on a gradient field.\n\nDetails\n\nThe minimization problem from Quadratic is modified with the addition weighting term W(uv) to reach the following minimization problem.\n\nminiint_(uv)in OmegaW(uv)nabla z(uv)-mathbfg(uv)^2+lambda(uv)leftz(uv)-z^0(uv)right^2dudv\n\nThe weighting term can be defined as below where mu and nu are parameters which control the impact of gradient of the reconstruction at each iteration and the input gradients.\n\nW(uv)=frac1sqrtleft(fracnabla z(uv)muright)^2+1beginbmatrixfrac1sqrt1+left(fracp(uv)nuright)^2 0 0 frac1sqrt1+left(fracq(uv)nuright)^2endbmatrix\n\nThis lends itself to the creation of the terms A^UV and B^UV which are OmegatimesOmega diagonal matrices, respectively,  contianing the values of;\n\n    frac1sqrt1+left(fracp(uv)nuright)^2sqrtfrac(partial^U_uz_uv)^2+(partial^V_vz_uv)^2mu^2+1\n\nand\n\n    frac1sqrt1+left(fracq(uv)nuright)^2sqrtfrac(partial^U_uz_uv)^2+(partial^V_vz_uv)^2mu^2+1\n\nwhere (UV)in+-^2. Using these definititions the original minimization problem can be rewriten as the following iterative scheme:\n\nbeginaligned\nz^(k+1)=minfrac14sum_(UV)in+-^2leftA^UV(D^U_umathbfz-mathbfp)^2+B^UV(D^V_vmathbfz-mathbfq)^2right\n+Lambda(mathbfz-mathbfz^0)\nendaligned\n\nwhich is then solved using Cholesky factorization.\n\nParameters\n\nz:\n\nAn AbstractArray which defines the value of z^0 the initial solution and prior to be used in the regulization term.\n\nμ:\n\nA Real which acts as a hyper-parameter to the function. Allows for the tuning of discontinuities. Defults to 5.0.\n\nν:\n\nA Real which acts as a hyper-parameter to the function. Allows for the tuning of discontinuities. Unlike μ is has a minimal impact on the solution and generally does not need adjusting unless an extreme value for μ is used where it can help to balance out the two terms. Defults to 10.0.\n\nλ:\n\nAn AbstractArray the same size as z defulting to 100^-6 everywhere. This defines theregulization weight at each point. Large valueas will force the algorithm to keep the solution near to z^0 at that position. Can be used to keep the solution near the initial solution or guide the solution to a certian known value at points (i.e. known maxima and minima). This value should be set uniformly small otherwise.\n\nmask:\n\nAn AbstractArray the same size as z, which guides the algorithm as to where the valid domain is. Values of 1 will be in the domain Omega while other values will be ignored and set to z^0. This can be used to integrate over sub-domain or to segment the domain into parts. The gen_mask() funtion can be used to generate a mask which will remove non-integrable regions dramatically improving the solution under most condition at the cost of not integrating the entire solution.\n\nExample\n\nThe following example demonstrates the use of the AnisotropicDiffusion integrator.\n\nusing ShapeFromShading, Makie\n\n# Generate synthetic gradients\np, q = synthetic_gradient(Prism(), radius = 75, img_size = 151)\n\n# Create a AnisotropicDiffusion() integrator\nanisotropicDiffusion = AnisotropicDiffusion(z=zeros(size(p)), γ=1.0)\nanisotropicDiffusionInit = AnisotropicDiffusion(z=Horn()(p,q), γ=1.0)\n\n# Calculate the heightmap from the gradients\nZ = anisotropicDiffusion(p, q)\nZ2 = anisotropicDiffusionInit(p, q)\n\n# Normalize to maximum of 1 (not necessary but makes displaying easier)\nZ = Z./maximum(Z)\nZ2 = Z2./maximum(Z2)\n\n# Display using Makie (Note: Makie can often take several minutes first time)\nr = 0.0:0.1:4\nvbox(surface(r, r, Z), surface(r, r, Z2))\n\nReference\n\n[1] Y. Quéau, J. Durou and J. Aujol, \"Variational Methods for Normal Integration\", Journal of Mathematical Imaging and Vision, vol. 60, no. 4, pp. 609-632, 2017. doi: 10.1007/s10851-017-0777-6\n\n\n\n\n\n","category":"method"},{"location":"#","page":"Home","title":"Home","text":"MumfordShah(::AbstractArray, ::AbstractArray)","category":"page"},{"location":"#ShapeFromShading.MumfordShah-Tuple{AbstractArray,AbstractArray}","page":"Home","title":"ShapeFromShading.MumfordShah","text":"MumfordShah()\n\nDefines the Mumford-Shah method, the final method proposed by Aujol, Durou and Quéau. It utilizes an adepted version of Mumford and Shah functional to provide a good reconstruction in the presence of discontinuities at the const of a longer runtime then other methods.\n\nwarning: Warning\nThis function can take several minutes to run on grids larger then 64X64.\n\nOutput\n\nMumfordShah() returns a MumfordShah integrator which can then be called to run the Mumford-Shah method method on a gradient field.\n\nDetails\n\nThis method involves modifying the minimization problem given by the Mumford and Shah functional given below:\n\nminmuiint_(uv)inOmegabackslash Knabla z(uv)dudv+int_Kdsigma+lambdaiint_(uv)inOmegabackslash Kz(uv)-z^0(uv)^2dudv\n\nWhere K is the set of discontinuities. This can then be adapted to our problem by utilizing a Ambrosio-Tortelli approximation to achaive the following functional where epsilonto0.\n\nbeginaligned\nE(z)=muiint_(uv)inOmegaw(uv)^2nabla z(uv)-mathbfg(uv)^2dudv\n+iint_(uv)leftepsilonnabla w(uv)^2+frac14epsilon(w(uv)-1)^2rightdudv\n+iint_(uv)lambda(uv)leftz(uv)-z^0(uv)rightdudv\nendaligned\n\nThis leads to the following discretization of the functional where mathbfw^+-_uv are thevecotr of weights in each forward and backward direction and the matrix W^+-_uv is the diagonal matrix formed from this vector.\n\nbeginalinged\nE(mathbfzmathbfw^+_umathbfw^-_umathbfw^+_vmathbfw^-_v)=fracmu2Big(W^+_u(D^+_umathbfz-mathbfp)^2+W^-_u(D^-_umathbfz-mathbfp)^2\n+W^+_v(D^+_vmathbfz-mathbfq)^2+W^-_v(D^-_vmathbfz-mathbfq)^2Big)\n+fracepsilon2Big(D^+_umathbfw^+_u^2+D^-_umathbfw^-_u^2+D^+_vmathbfw^+_v^2\n+D^-_vmathbfw^-_v^2Big)+frac18epsilonBig(mathbfw^+_u-mathbf1^2+mathbfw^-_u-mathbf1^2\n+mathbfw^+_v-mathbf1^2+mathbfw^-_v-mathbf1^2Big)+Lambda(mathbfz-mathbfz^0)^2\nendaligned\n\nThis is then solved with a conjugate gradient algorithm and an alternating optimization scheme at each step where the updates are found using the relationships below:\n\nbegingathered\nmathbfz^(k+1)=minE(mathbfz^(k)mathbfw^+(k)_umathbfw^-(k)_umathbfw^+(k)_vmathbfw^-(k)_v)\nmathbfw^+-(k+1)_uv=minE(mathbfz^(k+1mathbfw^+(k)_umathbfw^-(k)_umathbfw^+(k)_vmathbfw^-(k)_v)\nendgathered\n\nThis method can produce good results if the parameters are appropriotly tuned. If the parameters are too large the solution will suffer heavily from staircasing artifacts while setting it too small will result in a smooth solution. Even if the value is chosen correctly the algorithm tends to overfit the final solution to the discontinuities and they will extend into parts of the solution which are actually smooth.\n\nParameters\n\nz:\n\nAn AbstractArray which defines the value of z^0 the initial solution and prior to be used in the regulization term.\n\nϵ:\n\nA Real which acts as a hyper-parameter to the function. Controls how the final solution will converge. Large values will lead to staircasing while small values will over-smooth the surface. Must be relativly small to achieve convergence to a solution. Defults to 0.1.\n\nμ:\n\nA Real which acts as a hyper-parameter to the function. This value controls the smoothness of the final solution. Large values will lead to staircasing while small values will lead to over-smoothed solutions. Defults to 10.0.\n\nλ:\n\nAn AbstractArray the same size as z defulting to 100^-6 everywhere. This defines the regulization weight at each point. Large values will force the algorithm to keep the solution near to z^0 at that position. Can be used to keep the solution near the initial solution or guide the solution to a certian known value at points (i.e. known maxima and minima). This value should be set uniformly small otherwise.\n\nmask:\n\nAn AbstractArray the same size as z, which guides the algorithm as to where the valid domain is. Values of 1 will be in the domain Omega while other values will be ignored and set to z^0. This can be used to integrate over sub-domain or to segment the domain into parts. The gen_mask() funtion can be used to generate a mask which will remove non-integrable regions dramatically improving the solution under most condition at the cost of not integrating the entire solution.\n\nExample\n\nThe following example demonstrates the use of the MumfordShah integrator.\n\nusing ShapeFromShading, Makie\n\n# Generate synthetic gradients\np, q = synthetic_gradient(Prism(), radius = 75, img_size = 151)\n\n# Create a MumfordShah() integrator\nmumfordShah = MumfordShah(z=zeros(size(p)), γ=1.0)\nmumfordShahInit = MumfordShah(z=Horn()(p,q), γ=1.0)\n\n# Calculate the heightmap from the gradients\nZ = mumfordShah(p, q)\nZ2 = mumfordShahInit(p, q)\n\n# Normalize to maximum of 1 (not necessary but makes displaying easier)\nZ = Z./maximum(Z)\nZ2 = Z2./maximum(Z2)\n\n# Display using Makie (Note: Makie can often take several minutes first time)\nr = 0.0:0.1:4\nvbox(surface(r, r, Z), surface(r, r, Z2))\n\nReference\n\n[1] Y. Quéau, J. Durou and J. Aujol, \"Variational Methods for Normal Integration\", Journal of Mathematical Imaging and Vision, vol. 60, no. 4, pp. 609-632, 2017. doi: 10.1007/s10851-017-0777-6\n\n\n\n\n\n","category":"method"},{"location":"#Shape-From-Shading:-1","page":"Home","title":"Shape From Shading:","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"DiscreteShape(::AbstractArray)","category":"page"},{"location":"#ShapeFromShading.DiscreteShape-Tuple{AbstractArray}","page":"Home","title":"ShapeFromShading.DiscreteShape","text":"Z,p,q = retrieve_surface(algorithm::DiscreteShape, img::AbstractArray, iterations::Int=2000)\n\nAttempts to produce a heightmap from a grayscale image by minimization of a set of Euler-Lagrange equations. This is done discretely at each point in the image utilizing the second derivates of the surface normals and their Fourier Transforms.\n\nOutput\n\nReturns an M by N array of Float Z that represents the reconstructed height at the point and the gradients in M by N arrays of Float 'p' and 'q'.\n\nDetails\n\nThe algorithm attempts to minimise the brightness deviation ϵ through the brightness constraint epsilon_1 and smoothness constraint epsilon_2 as defined bellow:\n\nepsilon=iint((epsilon_1+lambdaepsilon_2))dxdy=iint((E(xy)-R(pq))^2+\nlambda(p_x^2+q_x^2+p_y^2+q_y^2))\n\nThis is minimised using the Euler-Lagrange equations defined as;\n\ndfracdeltaepsilondelta p-dfracdeltadelta xdfracdeltaepsilon\ndelta p_x-dfracdeltadelta ydfracdeltaepsilondelta p_y=0\n\nand\n\ndfracdelta\nepsilondelta q-dfracdeltadelta xdfracdeltaepsilondelta q_x-\ndfracdeltadelta ydfracdeltaepsilondelta q_y=0\n\nwhich become:\n\nbegingathered\n-2(E-R)dfracdelta Rdelta p-2lambda p_xx-2lambda p_yy=0\n-2(E-R)dfracdelta Rdelta p-2lambda q_xx-2lambda q_yy=0\nendgathered\n\nwhich can be further simplified to give:\n\nbegingathered\nnabla^2p=dfrac1lambda(R-E)dfracdelta Rdelta p\nnabla^2q=dfrac1lambda(R-E)dfracdelta Rdelta q\nendgathered\n\nwhere nabla^2p=p_xx+p_yy and nabla^2q=q_xx+q_yy are Laplacians of p and q.\n\nHowever, for computation we are dealing with a discreate case of these equations which can be defined as below:\n\nbegingathered\np_ij=barp_ij+dfrac14lambda(E-R)dfracdelta Rdelta pq_ij=\nbarq_ij+dfrac14lambda(E-R)dfracdelta Rdelta q\nendgathered\n\nwhere\n\nbarp_ij=dfracp_i+1j+p_i-1j+p_ij+1+p_ij-14\n\nand\n\nbarq_ij=dfracq_i+1j+q_i-1j+q_ij+1+q_ij-14\n\nFinally, the algorithm needs to enforce integrability on p and q and retrieve the surface Z. This can be done by taking the Fast Fourier Transform of p and q ()c_p(omega_xomega_y) and c_q(omega_xomega_y)) and then using the Inverse Fast Fourier Transform to recover Z and update p and q as per bellow:\n\nbegingathered\np=sum c_p(omega_xomega_y)e^j(omega_xx+omega_yy)\nq=sum c_q(omega_xomega_y)e^j(omega_xx+omega_yy)Z=sum c(omega_xomega_y)\ne^j(omega_xx+omega_yy)\nendgathered\n\nwhere\n\nc(omega_xomega_y)=dfrac-j(omega_xc_p(omega_xomega_y)+omega_yc_q(omega_x\nomega_y))omega_x^2+omega_y^2\n\nThe albedo and illumination_direction can be manually defined using the function signature:\n\nZ,p,q = retrieve_surface(algorithm::DiscreteShape, img::AbstractArray, albedo::Real, illumination_direction::Vector{T} where T <: Real, iterations::Int=2000)\n\nNote: if albedo and illumination_direction are not supplied they will be calculated at runtime using estimate_img_properties.\n\nArguments\n\nThe function arguments are described in more detail below.\n\nimg\n\nAn AbstractArray storing the grayscale value of each pixel within the range [0,1].\n\nalbedo\n\nA Real that specifies the albedo (amount of light reflected) of the image. If albedo is specified to must the illumination_direction.\n\nillumination_direction\n\nA Vector{T} where T <: Real that specifies the tilt value to be used by the algorithm. The illumination_direction should be a vector of the form [x,y,z] where x,y,z are int he range [0,1]. If illumination_direction is specified to must the albedo.\n\niterations\n\nAn Int that specifies the number of iterations the algorithm is to perform. If left unspecified a default value of 2000 is used.\n\nsmoothness\n\nAn Int that specifies the strength of the smoothness constraint in the minimised function.\n\nExample\n\nCompute the heightmap for a synthetic image generated by generate_surface.\n\nusing Images, Makie, ShapeFromShading\n\n#generate synthetic image\nimg = generate_surface(SynthSphere(), 1, [0.2,0,0.9], radius = 5)\n\n#calculate the heightmap (using 500 iterations)\nZ,p,q = retrieve_surface(DiscreteShape(), img, 500)\n\n#normalize to maximum of 1 (not necessary but makes displaying easier)\nZ = Z./maximum(Z)\n\n#display using Makie (Note: Makie can often take several minutes first time)\nr = 0.0:0.1:2\nsurface(r, r, Z)\n\nReference\n\nS. Elhabian, \"Hands on Shape from Shading\", Computer Vision and Image Processing, 2008.\n\n\n\n\n\n","category":"method"},{"location":"#","page":"Home","title":"Home","text":"DiscreteShapeBound(::AbstractArray)","category":"page"},{"location":"#ShapeFromShading.DiscreteShapeBound-Tuple{AbstractArray}","page":"Home","title":"ShapeFromShading.DiscreteShapeBound","text":"Z,p,q = retrieve_surface(algorithm::DiscreteShapeBound, img::AbstractArray, iterations::Int=2000)\n\nSame as DiscreteShape except it has its initial conditions bound by the image as per bellow where E is the brightness of the image:\n\nbegingathered\nZ_ij=begincases-100E_ij textif  E_ij0750 textotherwise\nendcasespq=nabla E\nendgathered\n\nExample\n\nCompute the heightmap for a synthetic image generated by generate_surface.\n\nusing Images, Makie, ShapeFromShading\n\n#generate synthetic image\nimg = generate_surface(SynthSphere(), 1, [0.2,0,0.9], radius = 5)\n\n#calculate the heightmap (using 500 iterations)\nZ,p,q = retrieve_surface(DiscreteShapeBound(), img, 500)\n\n#normalize to maximum of 1 (not necessary but makes displaying easier)\nZ = Z./maximum(Z)\n\n#display using Makie (Note: Makie can often take several minutes first time)\nr = 0.0:0.1:2\nsurface(r, r, Z)\n\nReference\n\nS. Elhabian, \"Hands on Shape from Shading\", Computer Vision and Image Processing, 2008.\n\n\n\n\n\n","category":"method"},{"location":"#","page":"Home","title":"Home","text":"Pentland(::AbstractArray)","category":"page"},{"location":"#ShapeFromShading.Pentland-Tuple{AbstractArray}","page":"Home","title":"ShapeFromShading.Pentland","text":"Z = retrieve_surface(algorithm::Pentland, img::AbstractArray)\n\nAttempts to produce a heightmap from a grayscale image using Pentland's algorithm.\n\nUnder the assumptions of Lambertian surface, orthographic projections, the surface being illuminated by distant light sources, the surface is not self-shadowing and the surface has constant albedo, hence it can be ignored. The algorithm employs Tayler series expansion and Fourier transforms to compute a non-iterative solution.\n\nOutput\n\nReturns an M by N array (matching dimensions of original image) of Float Z that represents the reconstructed height at the point.\n\nDetails\n\nIn Pentlands algorithm the image irradiance is defined as:\n\nE(xy)=R(pq)=dfracrho(i_xp+i_yq-i_z)sqrt1+p^2+q^2=dfracpsinsigmacos\ntau+qsinsigmasintau+cossigmasqrt1+p^2+q^2\n\nThis can be reduced using the Taylor series expansion about p=p_0 and p=p_0 and ignoring the higher order terms becomes:\n\nE(xy)=R(pq)approx R(p_0q_0)+(p-p_0)dfracdelta Rdelta p(p_0q_0)+(q-q_0)\ndfracdelta Rdelta q(p_0q_0)\n\nwhich for p_0=q_0=0 further reduces to:\n\nE(xy)approxcossigma+pcostausinsigma+qsintausinsigma\n\nThis gives the following transform identities:\n\nbegingathered\np=dfracdeltadelta xZ(xy)xleftrightarrowIm(-jomega_x)F_z(\nomega_xomega_y)q=dfracdeltadelta yZ(xy)xleftrightarrowIm(-j\nomega_y)F_z(omega_xomega_y)\nendgathered\n\nBy taking the Fourier transform of both sides if E(xy) yields the following:\n\nF_E=(-jomega_x)F_z(omega_xomega_y)costausinsigma+(-jomega_y)F_z(omega_x\nomega_y)sintausinsigma\n\nwhere F_z is the Fourier transform of Z(xy).\n\nThese can be rearranged, and the Inverse Fourier transform used to recover the surface Z(xy) as per the following:\n\nbegingathered\nF_E=F_z(omega_xomega_y)-jomega_xcostausinsigma-jomega_ysintausin\nsigmaRightarrow F_z(omega_xomega_y)=dfracF_E-jomega_xcostausin\nsigma-jomega_ysintausinsigmaZ(xy)=Im^-1F_z(omega_xomega_y)\nendgathered\n\nThe slant and tilt can be manually defined using the function signature:\n\nZ = retrieve_surface(algorithm::Pentland, img::AbstractArray, slant::Real, tilt::Real)\n\nNote: if slant and tilt are not defined they will be calculated at runtime using estimate_img_properties.\n\nArguments\n\nThe function arguments are described in more detail below.\n\nimg\n\nAn AbstractArray storing the grayscale value of each pixel within the range [0,1].\n\nslant\n\nA Real that specifies the slant value to be used by the algorithm. The slant should be a value in the range [0,π/2]. If slant is specified to must the tilt.\n\ntilt\n\nA Real that specifies the tilt value to be used by the algorithm. The tilt should be a value in the range [0,2π]. If tilt is specified to must the slant.\n\nExample\n\nCompute the heightmap for a synthetic image generated by generate_surface.\n\nusing Images, Makie, ShapeFromShading\n\n#generate synthetic image\nimg = generate_surface(SynthSphere(), 1, [0.2,0,0.9], radius = 5)\n\n#calculate the heightmap\nZ = retrieve_surface(Pentland(), img)\n\n#normalize to maximum of 1 (not necessary but makes displaying easier)\nZ = Z./maximum(Z)\n\n#display using Makie (Note: Makie can often take several minutes first time)\nr = 0.0:0.1:2\nsurface(r, r, Z)\n\nReference\n\nA. Pentland, \"Shape Information From Shading: A Theory About Human Perception,\" [1988 Proceedings] Second International Conference on Computer Vision, Tampa, FL, USA, 1988, pp. 404-413. doi: 10.1109/CCV.1988.590017\n\n\n\n\n\n","category":"method"},{"location":"#","page":"Home","title":"Home","text":"Photometric(::AbstractArray)","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Shah(::AbstractArray)","category":"page"},{"location":"#ShapeFromShading.Shah-Tuple{AbstractArray}","page":"Home","title":"ShapeFromShading.Shah","text":"Z,p,q = retrieve_surface(algorithm::Shah, img::AbstractArray, iterations::Int=200)\n\nAttempts to produce a hieghtmap from a grayscale image using Shah's algorithm.\n\nUnder the assumption that the albedo is constant, and the surface is Lambertian, the algorithm employs discrete approximations of p and q using finite differences in order to linearize the reflectance map in terms of Z by taking the first term of its Taylor series expansion.\n\nOutput\n\nReturns an M by N array (matching dimensions of original image) of Float Z that represents the reconstructed height at the point and the gradients in M by N arrays of Float 'p' and 'q'.\n\nDetails\n\nGiven the reflectance map for the surface defined as bellow:\n\nR(xy)=dfrac-i_xp-i_yq+i_zsqrt1+p^2+q^2=dfraccossigma+pcostausin\nsigma+qsintausinsigmasqrt1+p^2+q^2\n\nwhere i_x=fracI(1)I(3)=fraccostausinsigmacossigma=costau tansigma and i_y=fracI(2)I(3)=fracsintausinsigmacossigma =sintautansigma.\n\nand p and q are discretely approximated as:\n\nbegingathered\np=Z(xy)-Z(x-1y)\nq=Z(xy)-Z(xy-1)\nendgathered\n\nShah linearized the function f=E-R=0 in terms of Z in the vicinity of Z^k-1 by crating a system of linear equations which can be solved iteratively using the Jacobi iterative scheme, simplifying the Taylor series expansion to the first order to get the following:\n\nf(Z(xy))=0approx f(Z^n-1(xy))+(Z(xy)-Z^n-1(xy))dfracdf(Z^n-1(xy))\ndZ(xy)\n\nwhich by letting Z^n(xy)=Z(xy) gives:\n\nZ^n(xy=Z^n-1(xy)-dfracf(Z^n-1(xy))dfracdf(Z^n-1(xy))dZ(xy)\n\nwhere,\n\ndfracdf(Z^n-1(xy))dZ(xy)=dfrac(p+q)(pi_x+qi_y+1)sqrt(1+p^2+q^2)^3\nsqrt1+i_x+i_y-dfraci_x+i_ysqrt1+p^2+q^2sqrt1+i_x+i_y\n\nwhich as Z^0(xy)=0, allows the algorithm to iteratively solve for Z(xy).\n\nThe slant and tilt can be manually defined using the function signature:\n\nZ,p,q = retrieve_surface(algorithm::Shah, img::AbstractArray, slant::Real, tilt::Real, iterations::Int=200)\n\nArguments\n\nThe function arguments are described in more detail below.\n\nimg\n\nAn AbstractArray storing the grayscale value of each pixel within the range [0,1].\n\niterations\n\nAn Int that specifies the number of iterations the algorithm is to perform. If left unspecified a default value of 200 is used.\n\nslant\n\nA Real that specifies the slant value to be used by the algorithm. The slant should be a value in the range [0,π/2]. If slant is specified to must the tilt.\n\ntilt\n\nA Real that specifies the tilt value to be used by the algorithm. The tilt should be a value in the range [0,2π]. If tilt is specified to must the slant.\n\nExample\n\nCompute the heightmap for a synthetic image generated by generate_surface.\n\nusing Images, Makie, ShapeFromShading\n\n#generate synthetic image\nimg = generate_surface(SynthSphere(), 1, [0.2,0,0.9], radius = 5)\n\n#calculate the heightmap\nZ,p,q = retrieve_surface(Shah(), img)\n\n#normalize to maximum of 1 (not necessary but makes displaying easier)\nZ = Z./maximum(Z)\n\n#display using Makie (Note: Makie can often take several minutes first time)\nr = 0.0:0.1:2\nsurface(r, r, Z)\n\nReference\n\nT. Ping-Sing and M. Shah, \"Shape from shading using linear approximation\", Image and Vision Computing, vol. 12, no. 8, pp. 487-498, 1994. doi:10.1016/0262-8856(94)90002-7\n\n\n\n\n\n","category":"method"},{"location":"#Benchmarking:-1","page":"Home","title":"Benchmarking:","text":"","category":"section"},{"location":"#Miscellaneous:-1","page":"Home","title":"Miscellaneous:","text":"","category":"section"}]
}
