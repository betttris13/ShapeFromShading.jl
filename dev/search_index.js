var documenterSearchIndex = {"docs":
[{"location":"#ShapeFromShading.jl-1","page":"Home","title":"ShapeFromShading.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Documentation for ShapeFromShading.jl Work in progress mainly for testing at this point.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Frankot()","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Path(::AbstractArray, ::AbstractArray)","category":"page"},{"location":"#ShapeFromShading.Path-Tuple{AbstractArray,AbstractArray}","page":"Home","title":"ShapeFromShading.Path","text":"Path()\n\nCreates a Path() integrator which utilizes the average of two path integrals along varying paths. Each path integral reconstructs the surface with accumilating error along the path, hence averaging two different paths can minimize this error, although the method still suffers if the gradient field is not integrable at some points.\n\nOutput\n\nPath() returns a Path integrator which can then be called to integrate a gradient field.\n\nDetails\n\nUnder the assumption that the surface normals are approximitly integrable everywhere (fracpartial ppartial yapproxfracpartial qpartial x), then surface can be reconstructed using the path integral defined as:\n\nz(xy)=oint_cleft(fracpartial zpartial xfracpartial zpartial yright)cdot dl\n\nWhich can be broken into two integrals representing the value at each point on the surface as shown below for a path which integrates along the first column then along the row.\n\nz(uv)=int_0^vfracpartial zpartial y(0y)dy + int_0^ufracpartial zpartial x(xv)dx\n\nThe second path used in the algorithm is simply the transpose of the first integrating along the first row then down the column represented mathmatically as:\n\nz(uv)=int_0^ufracpartial zpartial x(x0)dx + int_0^vfracpartial zpartial y(uy)dy\n\nThe algorithm can be writen, then  discreatizes as shown below:\n\nbegingathered*\nz(uv)=frac12left(int_0^vfracpartial zpartial y(0y)dy + int_0^ufracpartial zpartial x(xv)dx + int_0^ufracpartial zpartial x(x0)dx + int_0^vfracpartial zpartial y(uy)dyright)\nz(uv)=frac12left(sum_i=0^vq(0i) + sum_j=0^up(jv) + sum_j=0^up(j0) + sum_i=0^vq(ui)right)\nz(uv)=frac12left(sum_i=0^v(q(0i) + q(ui)) + sum_j=0^u(p(j0) + p(jv))right)\nendgathered*\n\nIt is important to note as mentioned above if there are non-integrable points in the normal field then artifacts can appear in the reconstruction. This is seen in the example below where the otherwise smooth sphere appears \"spiky\". This can be corrected post reconstruction by smoothing but idealy a different integrator should be used.\n\nArguments\n\nPath integrator take no parameters.\n\nExample\n\nThe following example demontraits the use of the Path integrator.\n\nusing ShapeFromShading, Makie\n\n# Generate synthetic gradients\np, q = synthetic_gradient(SynthSphere(), radius = 38, img_size = 151)\n\n# Create a Path() integrator\npath = Path()\n\n# Calculate the heightmap from the gradients\nZ = path(p, q)\n\n# Normalize to maximum of 1 (not necessary but makes displaying easier)\nZ = Z./maximum(Z)\n\n# Display using Makie (Note: Makie can often take several minutes first time)\nr = 0.0:0.1:4\nsurface(r, r, Z)\n\nReference\n\nD. Forsyth and J. Ponce, Computer vision: a modern approach. Upper Saddle River, N.J: Prentice Hall, 2003, pp. 84-86.\n\n\n\n\n\n","category":"method"}]
}
