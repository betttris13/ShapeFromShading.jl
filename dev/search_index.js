var documenterSearchIndex = {"docs":
[{"location":"#ShapeFromShading.jl-1","page":"Home","title":"ShapeFromShading.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"The following documents the functionality currently available in ShapeFormShading.jl.","category":"page"},{"location":"#Synthetic-data-generation:-1","page":"Home","title":"Synthetic data generation:","text":"","category":"section"},{"location":"#Normal-Integration:-1","page":"Home","title":"Normal Integration:","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Frankot(::AbstractArray, ::AbstractArray)","category":"page"},{"location":"#ShapeFromShading.Frankot-Tuple{AbstractArray,AbstractArray}","page":"Home","title":"ShapeFromShading.Frankot","text":"Frankot()\n\nDefines the Frankot integrator which contians the Frankot-Chellappa method of integration. The Frankot-Chellappa method is a fast, reliable method for integration surface normals while enforcing integrability using Fourier methods.\n\nOutput\n\nFrankot() returns a Frankot integrator which can then be called to run the Frankot-Chellappa method on a gradient field.\n\nDetails\n\nFrankot-Chellappa method uses Fourier methods to attempt to solve the Poission equation nabla^2z = partial_up + partial_vq. By taking the Fourier transform of both sides we get:\n\n(omega^2_u + omega^2_v)hatz(omega_u omega_v) = imath omega_uhatp\n(omega_u omega_v) + imath omega_vhatq(omega_u omega_v)\n\nBy rearanging the above equation we arive at an equation for hatz;\n\nhatz(omega_u omega_v) = fracomega_uhatp(omega_u omega_v) +\nomega_vhatq(omega_u omega_v)imath(omega^2_u + omega^2_v)\n\nFrom which the final surface can be found by taking the inverse Fourier transform of hatz.\n\nDue to the way (omega_u omega_v) is defined the algorithm works best when the input dimentions are odd in length. To accomidate this the integrator will pad the edge of the inputs if they are even before running the algorithm. This padding will be removed before returning a value hence output size will be unaffected.\n\nParameters\n\nFrankot integrator take no parameters.\n\nExample\n\nThe following example demontraits the use of the Frankot integrator.\n\nusing ShapeFromShading, Makie\n\n# Generate synthetic gradients\np, q = synthetic_gradient(SynthSphere(), radius = 38, img_size = 151)\n\n# Create a Frankot() integrator\nfrankot = Frankot()\n\n# Calculate the heightmap from the gradients\nZ = frankot(p, q)\n\n# Normalize to maximum of 1 (not necessary but makes displaying easier)\nZ = Z./maximum(Z)\n\n# Display using Makie (Note: Makie can often take several minutes first time)\nr = 0.0:0.1:4\nsurface(r, r, Z)\n\nReference\n\n[1] R. T. Frankot and R. Chellappa, \"A method for enforcing integrability in shape from shading algorithms,\" in IEEE Transactions on Pattern Analysis and Machine Intelligence, vol. 10, no. 4, pp. 439-451, July 1988. doi: 10.1109/34.3909\n\n\n\n\n\n","category":"method"},{"location":"#","page":"Home","title":"Home","text":"Path(::AbstractArray, ::AbstractArray)","category":"page"},{"location":"#ShapeFromShading.Path-Tuple{AbstractArray,AbstractArray}","page":"Home","title":"ShapeFromShading.Path","text":"Path()\n\nCreates a Path() integrator which utilizes the average of two path integrals along varying paths. Each path integral reconstructs the surface with accumilating error along the path, hence averaging two different paths can minimize this error, although the method still suffers if the gradient field is not integrable at some points.\n\nOutput\n\nPath() returns a Path integrator which can then be called to integrate a gradient field.\n\nDetails\n\nUnder the assumption that the surface normals are approximitly integrable everywhere (fracpartial ppartial yapproxfracpartial qpartial x), then surface can be reconstructed using the path integral defined as:\n\nz(xy)=oint_cleft(fracpartial zpartial xfracpartial zpartial yright)cdot dl\n\nWhich can be broken into two integrals representing the value at each point on the surface as shown below for a path which integrates along the first column then along the row.\n\nz(uv)=int_0^vfracpartial zpartial y(0y)dy + int_0^ufracpartial zpartial x(xv)dx\n\nThe second path used in the algorithm is simply the transpose of the first, integrating along the first row then down the column represented mathmatically as:\n\nz(uv)=int_0^ufracpartial zpartial x(x0)dx + int_0^vfracpartial zpartial y(uy)dy\n\nThe algorithm can be writen, then  discreatizes as shown below:\n\nbegingathered\nz(uv)=frac12left(int_0^vfracpartial zpartial y(0y)dy + int_0^ufracpartial zpartial x(xv)dx + int_0^ufracpartial zpartial x(x0)dx + int_0^vfracpartial zpartial y(uy)dyright)\nz(uv)=frac12left(sum_i=0^vq(0i) + sum_j=0^up(jv) + sum_j=0^up(j0) + sum_i=0^vq(ui)right)\nz(uv)=frac12left(sum_i=0^v(q(0i) + q(ui)) + sum_j=0^u(p(j0) + p(jv))right)\nendgathered\n\nIt is important to note as mentioned above if there are non-integrable points in the normal field then artifacts can appear in the reconstruction. This is seen in the example below where the otherwise smooth sphere appears \"spiky\". This can be corrected post reconstruction by smoothing but idealy a different integrator should be used.\n\nArguments\n\nPath integrator take no parameters.\n\nExample\n\nThe following example demontraits the use of the Path integrator.\n\nusing ShapeFromShading, Makie\n\n# Generate synthetic gradients\np, q = synthetic_gradient(SynthSphere(), radius = 38, img_size = 151)\n\n# Create a Path() integrator\npath = Path()\n\n# Calculate the heightmap from the gradients\nZ = path(p, q)\n\n# Normalize to maximum of 1 (not necessary but makes displaying easier)\nZ = Z./maximum(Z)\n\n# Display using Makie (Note: Makie can often take several minutes first time)\nr = 0.0:0.1:4\nsurface(r, r, Z)\n\nReference\n\n[1] D. Forsyth and J. Ponce, Computer vision: a modern approach. Upper Saddle River, N.J: Prentice Hall, 2003, pp. 84-86.\n\n\n\n\n\n","category":"method"},{"location":"#","page":"Home","title":"Home","text":"SplitPath(::AbstractArray, ::AbstractArray)","category":"page"},{"location":"#ShapeFromShading.SplitPath-Tuple{AbstractArray,AbstractArray}","page":"Home","title":"ShapeFromShading.SplitPath","text":"SplitPath()\n\nCreates a SplitPath() integrator which utilizes the average of two path integrals along varying paths averaging the value at each step. Each path integral reconstructs the surface with accumilating error along the path, hence averaging two different paths at each step reduces the global error at the cost of local error, although the method still suffers if the gradient field is not integrable at some points it does less so the Path() from which it extends.\n\nOutput\n\nSplitPath() returns a SplitPath integrator which can then be called to integrate a gradient field.\n\nDetails\n\nUnder the assumption that the surface normals are approximitly integrable everywhere (fracpartial ppartial yapproxfracpartial qpartial x), then surface can be reconstructed using the path integral defined as:\n\nz(xy)=oint_cleft(fracpartial zpartial xfracpartial zpartial yright)cdot dl\n\nBy expanding on this principle and the discreate summation from Path() we can arrive at the discreate expresion for the value at each point, assuming all values prior to that point have been calculated, as follows:\n\nz_uv = frac12(z_u-1v+p_u-1v+z_uv-1+q_uv-1)\n\nAs with other simular methods (see Horn()) care must be taken with regards to boundries which can be calculated, to a constant value z(00) which is assumed to be the zero point, using:\n\nbegingathered\nz_u0 = z_u-10+p_u-10\nz_0v = z_0v-1+q_0v-1\nendgathered\n\nIt is important to note as mentioned above if there are non-integrable points in the normal field then artifacts can appear in the reconstruction. These errors gradully average out but will lead to \"streaks\" appearing in the reconstruction. This is seen in the example below where the otherwise smooth sphere appears has ripple like structures pointing toward to top right corner. This can be corrected post reconstruction by smoothing but idealy a different integrator should be used. It is also interesting to note the parrallels between this method and the Horn and Brooks methed, with this mehtod being effectivly the forward component of Horn's method. As such this algorithm provided a usefull middle gorund between direct integration algorithms and iterative algorithms such as the Horn and Brooks mehtod.\n\nArguments\n\nSplitPath integrator take no parameters.\n\nExample\n\nThe following example demontraits the use of the SplitPath integrator.\n\nusing ShapeFromShading, Makie\n\n# Generate synthetic gradients\np, q = synthetic_gradient(SynthSphere(), radius = 38, img_size = 151)\n\n# Create a Path() integrator\nsplitPath = SplitPath()\n\n# Calculate the heightmap from the gradients\nZ = splitPath(p, q)\n\n# Normalize to maximum of 1 (not necessary but makes displaying easier)\nZ = Z./maximum(Z)\n\n# Display using Makie (Note: Makie can often take several minutes first time)\nr = 0.0:0.1:4\nsurface(r, r, Z)\n\nReference\n\n[1] D. Forsyth and J. Ponce, Computer vision: a modern approach. Upper Saddle River, N.J: Prentice Hall, 2003, pp. 84-86. [2] B. Horn and M. Brooks, \"The variational approach to shape from shading\", Computer Vision, Graphics, and Image Processing, vol. 33, no. 2, pp. 174-208, 1986. doi: 10.1016/0734-189x(86)90114-3\n\n\n\n\n\n","category":"method"},{"location":"#","page":"Home","title":"Home","text":"Horn(::AbstractArray, ::AbstractArray)","category":"page"},{"location":"#ShapeFromShading.Horn-Tuple{AbstractArray,AbstractArray}","page":"Home","title":"ShapeFromShading.Horn","text":"Horn()\n\nImpliments the Horn and Brook's method of integrating surface normals. This algorithm offers an iterative solution to the Poisson equation descriping the surface providing good reconstructions under most conditions.\n\nOutput\n\nHorn() returns a Horn integrator which can then be called to integrate a gradient field.\n\nDetails\n\nThe Horn and Brook's method attempts to solve the Poisson equation nabla^2z = partial_up + partial_vq by the discreatation given below:\n\nz_u+1v+z_uv+1+z_u-1v+z_uv-1-4z_uv=fracp_u+1v-p_u-1v2+fracq_uv+1-q_uv-12\n\nWhich can be rearanged to give the iterative scheme provided by:\n\nz_uv^k+1= fracz_u+1v^k + z_uv+1^k + z_u-1v^k + z_uv-1^k4 - fracp_u+1v-p_u-1v8 - fracq_uv+1-q_uv-18\n\nThis scheme will always converge to a solution however the rate of convergance may depend upon the initial solution. This implimentation will initilize with a zero solution. Neumann boundry conditions are imposed at the edges where the scheme would otherwise go out of bounds.\n\nArguments\n\nThe function parameters are described in more detail below.\n\nMax_iter\n\nAn Int which controls the numbe rof iterations the algorithm will run for. the range [0,1].\n\nϵ\n\nA Real representing the distance between pixels. This will Control how tall the final reconstruction is relative the array grid.\n\nExample\n\nThe following example demontraits the use of the Horn integrator.\n\nusing ShapeFromShading, Makie\n\n# Generate synthetic gradients\np, q = synthetic_gradient(SynthSphere(), radius = 38, img_size = 151)\n\n# Create a Horn() integrator\nhorn = Horn(ϵ = 0.03, max_iter = 10000)\n\n# Calculate the heightmap from the gradients\nZ = horn(p, q)\n\n# Display using Makie (Note: Makie can often take several minutes first time)\nr = 0.0:0.1:4\nsurface(r, r, Z)\n\nReference\n\n[1] B. Horn and M. Brooks, \"The variational approach to shape from shading\", Computer Vision, Graphics, and Image Processing, vol. 33, no. 2, pp. 174-208, 1986. doi: 10.1016/0734-189x(86)90114-3\n\n\n\n\n\n","category":"method"},{"location":"#","page":"Home","title":"Home","text":"Durou(::AbstractArray, ::AbstractArray)","category":"page"},{"location":"#ShapeFromShading.Durou-Tuple{AbstractArray,AbstractArray}","page":"Home","title":"ShapeFromShading.Durou","text":"Durou()\n\nImpliments the Durou and Courteille method of integrating surface normals. This algorithm offers an iterative solution to the Poisson equation descriping the surface extending Horn anf Brook's method by improving the boundry approximation and providing good reconstructions under most conditions.\n\nOutput\n\nDurou() returns a Horn integrator which can then be called to integrate a gradient field.\n\nDetails\n\nTheDurou and Courteille's method attempts to solve the Poisson equation nabla^2z = partial_up + partial_vq by the discreatation given below:\n\nz_u+1v+z_uv+1-2z_uv=fracp_u+1v+p_uv2+fracq_uv+1+q_uv2\n\nWhich can be rearanged to give the iterative scheme provided by:\n\nz_uv^k+1= fracz_u+1v^k + z_uv+1^k2 - fracp_u+1v+p_uv4 - fracq_uv+1+q_uv4\n\nThis scheme will always converge to a solution however the rate of convergance may depend upon the initial solution. This implimentation will initilize with a zero solution. Natural boundry conditions are imposed at the edges using the condition ``\\partialuz-p+\\partialv-q=0. Although faster then the Horn and Brook's method and better at handeling boundries, it can generate a worse solution under some conditions.\n\nArguments\n\nThe function parameters are described in more detail below.\n\nMax_iter\n\nAn Int which controls the numbe rof iterations the algorithm will run for. the range [0,1].\n\nϵ\n\nA Real representing the distance between pixels. This will Control how tall the final reconstruction is relative the array grid.\n\nExample\n\nThe following example demontraits the use of the Durou integrator.\n\nusing ShapeFromShading, Makie\n\n# Generate synthetic gradients\np, q = synthetic_gradient(SynthSphere(), radius = 38, img_size = 151)\n\n# Create a Durou() integrator\ndurou = Durou(ϵ = 0.03, max_iter = 10000)\n\n# Calculate the heightmap from the gradients\nZ = durou(p, q)\n\n# Display using Makie (Note: Makie can often take several minutes first time)\nr = 0.0:0.1:4\nsurface(r, r, Z)\n\nReference\n\n[1] Y. Quéau, J. Durou and J. Aujol, \"Normal Integration: A Survey\", Journal of Mathematical Imaging and Vision, vol. 60, no. 4, pp. 576-593, 2017. doi: 10.1007/s10851-017-0773-x\n\n\n\n\n\n","category":"method"},{"location":"#","page":"Home","title":"Home","text":"Quadratic(::AbstractArray, ::AbstractArray)","category":"page"},{"location":"#ShapeFromShading.Quadratic-Tuple{AbstractArray,AbstractArray}","page":"Home","title":"ShapeFromShading.Quadratic","text":"Quadratic()\n\nImpliments the quadratic variational least squared method proposed by Aujol, Durou and Quéau. The algorithm solves the least squares system generated from minimizing a fidelity term mathcalF(z) = iint_(uv)in OmegaPhi(nabla z(uv) - g(uv))dudv and a regulization term mathcalR(z) = iint_(uv)in Omegalambda leftz(uv)-z^0(uv)right^2dudv where Phi(s) = s^2. This method is able to quicky produce good solutions on a smooth surface and can easily handle non-rectangular domains or sub-divided domains and can provide a good starting solution for other algorithms.\n\nOutput\n\nQuadratic() returns a Quadratic integrator which can then be called to run the quadratic method on a gradient field.\n\nDetails\n\nAs mentioned above the quadratic variational least squared method aims to minimize a fidelity term mathcalF(z) = iint_(uv)in OmegaPhi(nabla z(uv) - g(uv))dudv and a regulization term mathcalR(z) = iint_(uv)in Omegalambda leftz(uv)-z^0(uv)right^2dudv where Phi(s) = s^2.\n\nThis leads to the minimization problem given by:\n\nminiint_(uv)in Omeganabla z(uv)-boldg(uv)^lambda(uv)leftz(uv)-z^0(uv)right^2dudv\n\nBy discreatizing the problem we can arive at the functional:\n\nE(z) = frac12left(ssumsum_(uv)in Omega_u^+partial_u^+z_uv-p_uv^2 + ssumsum_(uv)in Omega_u^-partial_u^-z_uv-p_uv^2 + ssumsum_(uv)in Omega_v^+partial_v^+z_uv-q_uv^2 + ssumsum_(uv)in Omega_v^-partial_v^-z_uv-q_uv^2right) +ssumsum_(uv)in Omegaz_uv-z^0_uv^2\n\nwhere Omega_u^+ represents the domain where (uv)in(uv)inOmega(uv)(u+1v)inOmega etc Using this definition the descreate diferences can be converted into matrix form wherep{u,v}=z{u+1,v}-z{u,v}is the forward difference in the u direction etc This data is then stacked into three vectors\\bold{z},\\bold{p},\\bold{q}\\in\\R^{|\\Omega|} Thus the matrix reresenting each of these is defined as below where m(i) is the maping of the ith element of this vector to its corrisponding point in(u,v)andDu^+is a|\\Omega|\\times|\\Omega|`` matrix.\n\nD_u^+ij=begincases\n   0 textif  m(i)notinOmega_u^+ textor  j ne i textor  j ne i+1\n   -1 textif  j = i text and  m(i)inOmega_u^+\n   1 textif  j = i+1 text and  m(i)inOmega_u^+\nendcases\n\nFor a 2X2 domain this looks like:\n\nbeginbmatrix\n   -1  1  0  0 \n   0  0  0  0 \n   0  0  -1  1 \n   0  0  0  0\nendbmatrix\n\nThe other three discreate difference matricies are simularaly defined from there definitions to be D_u^-, D_v^+ and D_v^-. These can then be used to redefine the minimization problem to be in the form:\n\nE(boldz)=frac12left(D_u^+boldz-boldp^2+D_u^-boldz-boldp^2+D_v^+boldz-boldq^2+D_v^-boldz-boldq^2right)+Lambda(boldz-bold(z)^0)^2\n\nWhere Labda is the OmegatimesOmega diagonal matrix conatining the values of sqrtlambda_uv. Using the above definitions the negitive Laplacian matrix can then be defined as:\n\nL=frac12D_u^+^top D_u^++D_u^-^top D_u^-+D_v^+^top D_v^++D_v^-^top D_v^-\n\nFinally the least minimization problem can be represented in the form of a least squares problem of the form Aboldz=boldb where:\n\nbegingathered\n    A=L+Lambda^2\n    boldb=frac12leftD_u^+^top+D_u^-^toprightboldp+frac12leftD_v^+^top+D_v^-^toprightboldq+Labda^2boldz^0\n    =D_uboldp+D_vboldq+Labda^2boldz^0\nendgathered\n\nThis system is then solved using a standard conjugate gradient algorithm where the initialization has only a slight impact on the runtime and no impact on the final solution. The algorithm provides good results on smooth surfaces but struggles in the presence of disconinueties.\n\nArguments\n\nz\n\nAn AbstractArray which defines the value of z^0 the initial solution and prior to be used in the regulization term.\n\nλ\n\nAn AbstractArray the same size as z defulting to 100^-6 everywhere. This defines theregulization weight at each point. Large valueas will force the algorithm to keep the solution near to z^0 at that position. Can be used to keep the solution near the initial solution or guide the solution to a certian known value at points (i.e. known maxima and minima). This value should be set uniformly small otherwise.\n\nmask\n\nAn AbstractArray the same size as z, which guides the algorithm as to where the valid domain is. Values of 1 will be in the domain Omega while other values will be ignored and set to z^0. This can be used to integrate over sub-domain or to segment the domain into parts. The gen_mask() funtion can be used to generate a mask which will remove non-integrable regions dramatically improving the solution under most condition at the cost of not integrating the entire solution.\n\nExample\n\nThe following example demontraits the use of the Quadratic integrator.\n\nusing ShapeFromShading, Makie\n\n# Generate synthetic gradients\np, q = synthetic_gradient(SynthSphere(), radius = 38, img_size = 151)\n\n# Create a Quadratic() integrator\nquadratic = Quadratic()\n\n# Calculate the heightmap from the gradients\nZ = quadratic(p, q)\n\n# Display using Makie (Note: Makie can often take several minutes first time)\nr = 0.0:0.1:4\nsurface(r, r, Z)\n\nReference\n\n[1] Y. Quéau, J. Durou and J. Aujol, \"Variational Methods for Normal Integration\", Journal of Mathematical Imaging and Vision, vol. 60, no. 4, pp. 609-632, 2017. doi: 10.1007/s10851-017-0777-6\n\n\n\n\n\n","category":"method"},{"location":"#Shape-From-Shading:-1","page":"Home","title":"Shape From Shading:","text":"","category":"section"},{"location":"#Benchmarking:-1","page":"Home","title":"Benchmarking:","text":"","category":"section"},{"location":"#Miscellaneous:-1","page":"Home","title":"Miscellaneous:","text":"","category":"section"}]
}
